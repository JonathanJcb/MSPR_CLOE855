1. - Sécurisation de votre Infrastructure Web :

. 1.1 - La base de données database.db de votre serveur doit être sauvegarder automatiquement sur un serveur tiers (3 points).

#!/bin/bash

# Variables du backup
DB_PATH="/home/jonathanjcb129/www/flask1/database.db"
BACKUP_PATH=" /home/jonathanjcb129/www/flask1/backup"
DATE=$(date +"%Y%m%d%H%M") 
BACKUP_FILE="database_backup_$DATE.db"
REMOTE_USER="JONATHAN"
REMOTE_HOST="176.175.172.29"
REMOTE_PATH="/backup/"

cp $DB_PATH $BACKUP_PATH/$BACKUP_FILE

scp -i ~/.ssh/id_rsa_backup $BACKUP_PATH/$BACKUP_FILE $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH

crontab : 

crontab -e
0 0 * * * ./backup_script.sh

. 1.2 - Mettre en place un contrôle d'accès (traçabilité) pour suivre le trafic des connections (1 point).

log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                '$status $body_bytes_sent "$http_referer" '
                '"$http_user_agent" "$http_x_forwarded_for"';
access_log /var/log/nginx/access.log main;


. 1.3 - Mettre en place une détection des menaces pour surveiller les activités suspectes (1 point).

Il faudrait pour ce point utiliser un IDS/IPS qui est un système de détection d'intrusion (Snort, Suricata, ...).

2. Sécurisation des Clés SSH :

. 2.1 - Utilisation d'une solution de gestion des clés SSH centralisée pour stocker et gérer les clés SSH de manière sécurisée (2 points).

La solution Vault de HashiCorp ou AWS Secrets Manager pour stocker et gérer les clés SSH de manière sécurisée pourrait être utiliser pour ce point.

. 2.2 - Mise en place d'une rotation régulière des clés SSH pour réduire les risques associés aux clés compromises (1 point).

#!/bin/bash
# Génération de nouvelle clé
ssh-keygen -f ~/.ssh/id_rsa_new -N ""

# Déploiement de la nouvelle clé sur les serveurs
for server in `cat servers_list.txt`; do
    ssh-copy-id -i ~/.ssh/id_rsa_new.pub $server
done

# Remplacer l'ancienne clé
mv ~/.ssh/id_rsa_new ~/.ssh/id_rsa
mv ~/.ssh/id_rsa_new.pub ~/.ssh/id_rsa.pub


. 2.3 - Intégration de mécanismes d'authentification à plusieurs facteurs (MFA) pour renforcer la sécurité des connexions SSH (1 point).

sudo apt-get install libpam-google-authenticator
google-authenticator

# Modifier le fichier PAM pour inclure Google Authenticator
echo "auth required pam_google_authenticator.so" | sudo tee -a /etc/pam.d/sshd


3. Sécurisation de votre code :

. 3.1 - Utilisation de services de contrôle de code source pour vérifier la qualité et la sécurité de votre code source (2 points).

name: Codacy Analysis

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  codacy-analysis:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Run Codacy analysis
      uses: codacy/codacy-analysis-cli-action@v3
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}


. 3.2 - Mise en place de pipelines CI/CD pour automatiser les tests de vos API (2 points).

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/JonathanJcb/MSPR_CLOE855.git'
            }
        }
        stage('Install dependencies') {
            steps {
                sh 'pip install -r requirements.txt'
            }
        }
        stage('Run tests') {
            steps {
                sh 'pytest tests/'
            }
        }
    }
}
